# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Cache node modules
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        cache-dependency-path: '**/package-lock.json'
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: ra-util ci
      run: npm ci
      working-directory: ra-util
    - name: ra-util build
      run: npm run build
      working-directory: ra-util
    - name: embedv86 ci
      run: npm ci
      working-directory: embedv86
    - name: embedv86 build
      run: npm run build
      working-directory: embedv86
    - name: ui ci
      run: npm ci
      working-directory: gisst-player-ui
    - name: ui build
      run: npm run build
      working-directory: gisst-player-ui
    - name: frontend-web ci
      run: npm ci
      working-directory: frontend-web
    - name: frontend-web build
      run: npm run build
      working-directory: frontend-web
    - name: frontend-elec ci
      run: npm ci
      working-directory: frontend-elec
    - name: frontend-elec tsc
      run: ./node_modules/typescript/bin/tsc
      working-directory: frontend-elec
    - name: upload frontend-web/dist
      uses: actions/upload-artifact@v3
      with:
        name: web-dist
        path: frontend-web/dist
        retention-days: 1
